package smart_akwarium
public
  with Base_Types;
  with Data_Model;
  
  -- ==== DATA ====
  data TemperatureData
	properties
	  Data_Model::Data_Representation => Struct;
	end TemperatureData;

  data PHData
	properties
	  Data_Model::Data_Representation => Struct;
	end PHData;
	
  data LightLevelData
	properties
	  Data_Model::Data_Representation => Struct;
	end LightLevelData;
	
  data CommandData
	properties
	  Data_Model::Data_Representation => Struct;
	end CommandData;
	
  data SchedulerConfig
	properties
	  Data_Model::Data_Representation => Struct;
	end SchedulerConfig;
	
  data NetworkPacket
	properties
	  Data_Model::Data_Representation => Struct;
	end NetworkPacket;
	
  data SensorReading
	properties
	  Data_Model::Data_Representation => Struct;
	end SensorReading;
  


  -- ==== DEVICES ====
  device TemperatureSensor end TemperatureSensor;
  device PHSensor end PHSensor;
  device LightSensor end LightSensor;
  device HeaterActuator end HeaterActuator;
  device LightActuator end LightActuator;
  device WiFiModule end WiFiModule;
  	

  -- ==== THREADS ====
  thread TempMonitor end TempMonitor;
  
  thread implementation TempMonitor.impl
	properties
	  Dispatch_Protocol => Periodic;
	  Period => 1000ms;
	end TempMonitor.impl;
	  
  
  thread PHMonitor end PHMonitor;
  	
  thread implementation PHMonitor.impl
	properties
	  Dispatch_Protocol => Periodic;
	  Period => 1000ms;
	end PHMonitor.impl;

  thread LightMonitor end LightMonitor;
  	
  thread implementation LightMonitor.impl
	properties
	  Dispatch_Protocol => Periodic;
	  Period => 1000ms;
	end LightMonitor.impl;
	
  thread NetworkReceiver end NetworkReceiver;
	
  thread implementation NetworkReceiver.impl
	properties
	  Dispatch_Protocol => Periodic;
	  Period => 1000ms;
	end NetworkReceiver.impl;
	
  thread ControlLoop end ControlLoop;
	
  thread implementation ControlLoop.impl
	properties
	  Dispatch_Protocol => Periodic;
	  Period => 1000ms;
	end ControlLoop.impl;

  -- ==== PROCESS ====
  process SensorProcess end SensorProcess;
  	
  process implementation SensorProcess.impl
	subcomponents
	  temp_monitor: thread TempMonitor.impl;
	  ph_monitor: thread PHMonitor.impl;
	  light_monitor: thread LightMonitor.impl;
	end SensorProcess.impl;

  process ControlProcess end ControlProcess;

  process implementation ControlProcess.impl
	subcomponents
	  control_loop: thread ControlLoop.impl;
	  receiver: thread NetworkReceiver.impl;
	end ControlProcess.impl;
  

  -- ==== PROCESSOR ====
  processor RPiController end RPiController;

  -- ==== MEMORY ====
  memory MainMemory end MainMemory;

  -- ==== BUS ====
  bus I2CBus end I2CBus;
  bus WiFiBus end WiFiBus;

  -- ==== SYSTEM ====
  system SmartAkwariumSystem end SmartAkwariumSystem;
  	
  system implementation SmartAkwariumSystem.impl
	subcomponents
	  sensors: process SensorProcess.impl;
	  control: process ControlProcess.impl;
	  cpu: processor RPiController;
	  mem: memory MainMemory;
	
	  -- Devices
	  temp_sensor: device TemperatureSensor;
	  ph_sensor: device PHSensor;
	  light_sensor: device LightSensor;
	  heater: device HeaterActuator;
	  light: device LightActuator;
	  wifi: device WiFiModule;
	
	  -- Buses
	  i2c_bus: bus I2CBus;
	  wifi_bus: bus WiFiBus;
	
	--connections
	  -- Można dodać później połączenia device <-> bus itd.
	end SmartAkwariumSystem.impl;


	  

end smart_akwarium;
